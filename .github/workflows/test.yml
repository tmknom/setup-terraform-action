name: Test
on:
  workflow_dispatch:
  pull_request:
    paths: ["action.yml", ".github/workflows/test.yml"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  test-specifying-version:
    name: Test specifying version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Exercise
        uses: ./
        with:
          terraform-version: 1.2.3
          tfcmt-version: 4.14.0

      - name: Verify Terraform
        run: |
          set -x
          json="$(terraform version -json)"
          test "$(jq -r '.terraform_version' <<<"${json}")" = '1.2.3'

      - name: Verify tfcmt
        run: |
          set -x
          actual="$(tfcmt --version)"
          grep 'tfcmt version 4.14.0' <<<"${actual}"

  test-latest-version:
    name: Test latest version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Exercise
        uses: ./
        with:
          terraform-version: latest
          tfcmt-version: latest

      - name: Verify Terraform
        run: |
          set -x
          json="$(terraform version -json)"
          test "$(jq -r '.terraform_outdated' <<<"${json}")" = 'false'

      - name: Verify tfcmt
        run: |
          set -x
          actual="$(tfcmt --version)"
          grep 'tfcmt version 4.' <<<"${actual}"

  test-omit-version:
    name: Test omit version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Exercise
        uses: ./

      - name: Verify Terraform
        run: |
          set -x
          json="$(terraform version -json)"
          test "$(jq -r '.terraform_outdated' <<<"${json}")" = 'false'

      - name: Verify tfcmt
        run: |
          set -x
          actual="$(tfcmt --version)"
          grep 'tfcmt version 4.' <<<"${actual}"

  test-plugin-cache:
    name: Test plugin cache
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        id: setup
        run: |
          set -x
          test_dir="${RUNNER_TEMP}/${GITHUB_JOB}/${GITHUB_RUN_ID}"
          tf_file="${GITHUB_WORKSPACE}/.github/fixtures/main.tf"
          lock_file="${GITHUB_WORKSPACE}/.github/fixtures/.terraform.lock.hcl"
          cat "${tf_file}" "${lock_file}"

          no_cache_dir="${test_dir}/no-cache"
          mkdir -p "${no_cache_dir}"
          echo "no-cache-dir=${no_cache_dir}" >> "${GITHUB_OUTPUT}"
          cp "${tf_file}" "${no_cache_dir}/main.tf"
          cp "${lock_file}" "${no_cache_dir}/.terraform.lock.hcl"

          cache_dir="${test_dir}/cache"
          mkdir -p "${cache_dir}"
          echo "cache-dir=${cache_dir}" >> "${GITHUB_OUTPUT}"
          cp "${tf_file}" "${cache_dir}/main.tf"
          cp "${lock_file}" "${cache_dir}/.terraform.lock.hcl"

      - name: Exercise
        uses: ./
        with:
          terraform-version: 1.2.3

      - name: Verify no cached
        working-directory: ${{ steps.setup.outputs.no-cache-dir }}
        run: |
          set -x
          pwd
          cat main.tf
          terraform init | tee -a init.log
          grep "Installed hashicorp/aws v5.74.0 (signed by HashiCorp)" init.log

      - name: Verify cached
        working-directory: ${{ steps.setup.outputs.cache-dir }}
        run: |
          set -x
          pwd
          cat main.tf
          terraform init | tee -a init.log
          grep "Using hashicorp/aws v5.74.0 from the shared cache directory" init.log
