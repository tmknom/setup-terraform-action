name: Setup Terraform
description: |
  This action sets up [Terraform CLI](https://www.terraform.io/) in your GitHub Actions workflow by:

  - Downloading a specified version of Terraform CLI and adding it to the `PATH`
  - Verifying that the downloaded binary is created and signed by HashiCorp before installation
  - Setting the `TF_PLUGIN_CACHE_DIR` environment variable to enable the plugin cache

  This enables Terraform CLI commands to execute just like they do on your local environment.

  ## Usage

  ```yaml
    steps:
      - name: Setup Terraform
        uses: tmknom/setup-terraform-action@v0
        with:
          terraform-version: 1.2.3
  ```

inputs:
  terraform-version:
    default: latest
    required: false
    description: The version of Terraform CLI to install.

runs:
  using: composite

  steps:
    - name: Create working directory
      id: work
      run: |
        echo "::group::Create working directory"
        set -x
        repo="$(cut -d / -f 7 <<<"${GITHUB_ACTION_PATH/./${GITHUB_REPOSITORY_ID}}")"
        owner="$(cut -d / -f 6 <<<"${GITHUB_ACTION_PATH}")"
        sha256="$(sha256sum "${GITHUB_ACTION_PATH}/action.yml" | cut -d ' ' -f 1)"
        install_dir="${RUNNER_TEMP}/__${owner}-${repo}-${sha256}"
        echo "path=${install_dir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${install_dir}"
        echo "::endgroup::"
      shell: bash

    - name: Determine install version
      id: version
      env:
        TERRAFORM_VERSION: ${{ inputs.terraform-version }}
      run: |
        echo "::group::Determine install version"
        set -x
        version="${TERRAFORM_VERSION}"
        if [[ "${TERRAFORM_VERSION}" == "latest" ]]; then
          api_url="https://api.github.com/repos/hashicorp/terraform/releases/latest"
          version="$(curl --silent --show-error "${api_url}" | jq -r '.tag_name')"
        fi
        no_prefix="${version/v/}"
        echo "number=${no_prefix}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    # Security at HashiCorp
    # https://www.hashicorp.com/trust/security
    - name: Import PGP public key
      working-directory: ${{ steps.work.outputs.path }}
      env:
        EXPECTED_FINGERPRINT: C874 011F 0AB4 0511 0D02 1055 3436 5D94 72D7 468F
      run: |
        echo "::group::Import PGP public key"
        set -x

        # Downloaded in advance from https://www.hashicorp.com/.well-known/pgp-key.txt
        key_file="${GITHUB_ACTION_PATH}/pgp-key.txt"

        # pub   rsa4096 2021-04-19 [SC] [expires: 2026-04-18]
        #       C874 011F 0AB4 0511 0D02  1055 3436 5D94 72D7 468F
        # uid                      HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>
        # sub   rsa4096 2021-04-19 [E] [expires: 2026-04-18]
        # sub   rsa4096 2021-04-19 [S] [expired: 2022-04-20]
        # sub   rsa4096 2021-04-21 [S] [expires: 2026-04-20]
        key_info="$(gpg --with-fingerprint --show-keys "${key_file}")"

        # Verify and import PGP public key
        fingerprint="$(grep -A 1 "pub " <<<"${key_info}" | tail -1 | sed 's/^[[:space:]]*//' | tr -s ' ')"
        if [[ "${fingerprint}" != "${EXPECTED_FINGERPRINT}" ]]; then
          message="actual fingerprint: '${fingerprint}', see details https://www.hashicorp.com/trust/security"
          echo "::error title=Invalid PGP public key::${message}"
          exit 1
        fi
        gpg --import "${key_file}"
        echo "::endgroup::"
      shell: bash

    # Verify HashiCorp binary downloads
    # https://developer.hashicorp.com/well-architected-framework/operational-excellence/verify-hashicorp-binary
    - name: Install Terraform
      working-directory: ${{ steps.work.outputs.path }}
      env:
        VERSION: ${{ steps.version.outputs.number }}
      run: |
        echo "::group::Install Terraform"
        set -x
        archive_file="terraform_${VERSION}_linux_amd64.zip"
        checksum_file="terraform_${VERSION}_SHA256SUMS"
        signature_file="terraform_${VERSION}_SHA256SUMS.sig"

        # Download archive, checksum, and signature files
        base_url="https://releases.hashicorp.com/terraform/${VERSION}"
        curl --silent --show-error --location --remote-name "${base_url}/${archive_file}"
        curl --silent --show-error --location --remote-name "${base_url}/${checksum_file}"
        curl --silent --show-error --location --remote-name "${base_url}/${signature_file}"

        # Verify signature and checksum files
        gpg --verify "${signature_file}" "${checksum_file}"

        # Verify checksum and archive files
        grep "${archive_file}" "${checksum_file}" | sha256sum --check

        # Install binary and set path variables
        bin_path="${PWD}/bin"
        mkdir -p "${bin_path}"
        unzip "${PWD}/${archive_file}" -d "${bin_path}"
        echo "${bin_path}" >> "${GITHUB_PATH}"
        echo "::endgroup::"
      shell: bash

    # Provider Plugin Cache
    # https://developer.hashicorp.com/terraform/cli/config/config-file#provider-plugin-cache
    - name: Enable plugin cache
      working-directory: ${{ steps.work.outputs.path }}
      run: |
        echo "::group::Enable plugin cache"
        set -x
        cache_dir="${PWD}/.terraform.d/plugin-cache"
        mkdir -p "${cache_dir}"
        echo "TF_PLUGIN_CACHE_DIR=${cache_dir}" >> "${GITHUB_ENV}"
        echo "::endgroup::"
      shell: bash

    - name: Log details
      if: ${{ failure() || runner.debug }}
      working-directory: ${{ steps.work.outputs.path }}
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: |
        echo "::group::Log details"
        echo "${INPUTS}"
        set -x
        tree -ah "${PWD}"
        gpg --with-fingerprint --show-keys "${GITHUB_ACTION_PATH}/pgp-key.txt"
        echo "::endgroup::"
      shell: bash
