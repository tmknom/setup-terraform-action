name: Setup Terraform
description: |
  This action sets up [Terraform CLI](https://www.terraform.io/) and
  [tfcmt](https://github.com/suzuki-shunsuke/tfcmt) in your GitHub Actions workflow by:

  - Installing a specified version of Terraform CLI and tfcmt
  - Verifying the authenticity and integrity of the downloaded binaries to prevent tampering
  - Setting the `TF_PLUGIN_CACHE_DIR` environment variable to enable the plugin cache

  This enables Terraform CLI commands to execute just like they do on your local environment.
  Additionally, tfcmt simplifies commenting on the results of Terraform CLI commands in pull requests.

  ## Usage

  ```yaml
    steps:
      - name: Setup Terraform
        uses: tmknom/setup-terraform-action@v0
        with:
          terraform-version: 1.2.3
          tfcmt-version: 4.14.0
  ```

inputs:
  terraform-version:
    default: latest
    required: false
    description: The version of Terraform CLI to install.
  tfcmt-version:
    default: latest
    required: false
    description: The version of tfcmt to install.

runs:
  using: composite

  steps:
    - name: Create working directory
      id: work
      run: |
        echo "::group::Create working directory"
        set -x

        # Create base directory
        repo="$(cut -d / -f 7 <<<"${GITHUB_ACTION_PATH/./${GITHUB_REPOSITORY_ID}}")"
        owner="$(cut -d / -f 6 <<<"${GITHUB_ACTION_PATH}")"
        sha256="$(sha256sum "${GITHUB_ACTION_PATH}/action.yml" | cut -d ' ' -f 1)"

        base_dir="${RUNNER_TEMP}/__${owner}-${repo}-${sha256}"
        echo "base-dir=${base_dir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${base_dir}"

        # Create download directory
        terraform_dir="${base_dir}/terraform"
        echo "terraform-dir=${terraform_dir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${terraform_dir}"

        tfcmt_dir="${base_dir}/tfcmt"
        echo "tfcmt-dir=${tfcmt_dir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${tfcmt_dir}"

        # Create bin directory and set system PATH environment variables
        bin_dir="${base_dir}/bin"
        echo "bin-dir=${bin_dir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${bin_dir}"
        echo "${bin_dir}" >> "${GITHUB_PATH}"

        # Create plugin cache directory and enable provider plugin cache
        # https://developer.hashicorp.com/terraform/cli/config/config-file#provider-plugin-cache
        plugin_cache_dir="${base_dir}/plugin-cache"
        mkdir -p "${plugin_cache_dir}"
        echo "TF_PLUGIN_CACHE_DIR=${plugin_cache_dir}" >> "${GITHUB_ENV}"
        echo "::endgroup::"
      shell: bash

    - name: Determine terraform version
      id: terraform
      env:
        TERRAFORM_VERSION: ${{ inputs.terraform-version }}
      run: |
        echo "::group::Determine terraform version"
        set -x
        version="${TERRAFORM_VERSION}"
        if [[ "${TERRAFORM_VERSION}" == "latest" ]]; then
          api_url="https://api.github.com/repos/hashicorp/terraform/releases/latest"
          version="$(curl --silent --show-error "${api_url}" | jq -r '.tag_name')"
        fi
        no_prefix="${version/v/}"
        echo "version=${no_prefix}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Determine tfcmt version
      id: tfcmt
      env:
        TFCMT_VERSION: ${{ inputs.tfcmt-version }}
      run: |
        echo "::group::Determine tfcmt version"
        set -x
        version="${TFCMT_VERSION}"
        if [[ "${TFCMT_VERSION}" == "latest" ]]; then
          api_url="https://api.github.com/repos/suzuki-shunsuke/tfcmt/releases/latest"
          version="$(curl --silent --show-error "${api_url}" | jq -r '.tag_name')"
        fi
        no_prefix="${version/v/}"
        echo "version=${no_prefix}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    # Security at HashiCorp
    # https://www.hashicorp.com/trust/security
    - name: Import PGP public key
      working-directory: ${{ steps.work.outputs.terraform-dir }}
      env:
        EXPECTED_FINGERPRINT: C874 011F 0AB4 0511 0D02 1055 3436 5D94 72D7 468F
      run: |
        echo "::group::Import PGP public key"
        set -x

        # Downloaded in advance from https://www.hashicorp.com/.well-known/pgp-key.txt
        key_file="${GITHUB_ACTION_PATH}/pgp-key.txt"

        # pub   rsa4096 2021-04-19 [SC] [expires: 2026-04-18]
        #       C874 011F 0AB4 0511 0D02  1055 3436 5D94 72D7 468F
        # uid                      HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>
        # sub   rsa4096 2021-04-19 [E] [expires: 2026-04-18]
        # sub   rsa4096 2021-04-19 [S] [expired: 2022-04-20]
        # sub   rsa4096 2021-04-21 [S] [expires: 2026-04-20]
        key_info="$(gpg --with-fingerprint --show-keys "${key_file}")"

        # Verify and import PGP public key
        fingerprint="$(grep -A 1 "pub " <<<"${key_info}" | tail -1 | sed 's/^[[:space:]]*//' | tr -s ' ')"
        if [[ "${fingerprint}" != "${EXPECTED_FINGERPRINT}" ]]; then
          message="actual fingerprint: '${fingerprint}', see details https://www.hashicorp.com/trust/security"
          echo "::error title=Invalid PGP public key::${message}"
          exit 1
        fi
        gpg --import "${key_file}"
        echo "::endgroup::"
      shell: bash

    # Verify HashiCorp binary downloads
    # https://developer.hashicorp.com/well-architected-framework/operational-excellence/verify-hashicorp-binary
    - name: Install Terraform
      working-directory: ${{ steps.work.outputs.terraform-dir }}
      env:
        VERSION: ${{ steps.terraform.outputs.version }}
        BIN_DIR: ${{ steps.work.outputs.bin-dir }}
      run: |
        echo "::group::Install Terraform"
        set -x
        archive_file="terraform_${VERSION}_linux_amd64.zip"
        checksum_file="terraform_${VERSION}_SHA256SUMS"
        signature_file="terraform_${VERSION}_SHA256SUMS.sig"

        # Download archive, checksum, and signature files
        base_url="https://releases.hashicorp.com/terraform/${VERSION}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${archive_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${checksum_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${signature_file}"

        # Verify signature and checksum files
        gpg --verify "${signature_file}" "${checksum_file}"

        # Verify checksum and archive files
        grep "${archive_file}" "${checksum_file}" | sha256sum --check

        # Install binary
        unzip "${archive_file}" -d "${BIN_DIR}"
        echo "::endgroup::"
      shell: bash

    - name: Check verification tool is installed
      id: installed
      run: |
        echo "::group::Check verification tool is installed"
        set -x
        installed_cosign="false"
        if [ "$(which cosign)" ]; then
          installed_cosign="true"
        fi;
        echo "cosign=${installed_cosign}" >> "${GITHUB_OUTPUT}"

        installed_slsa_verifier="false"
        if [ "$(which slsa-verifier)" ]; then
          installed_slsa_verifier="true"
        fi;
        echo "slsa-verifier=${installed_slsa_verifier}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    # Cosign: Code signing and transparency for containers and binaries
    # https://github.com/sigstore/cosign-installer
    - name: Install Cosign
      uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
      if: ${{ steps.installed.outputs.cosign == 'false' }}

    # slsa-verifier: Verify provenance from SLSA compliant builders
    # https://github.com/slsa-framework/slsa-verifier
    - name: Install slsa-verifier
      uses: slsa-framework/slsa-verifier/actions/installer@3714a2a4684014deb874a0e737dffa0ee02dd647 # v2.6.0
      if: ${{ steps.installed.outputs.slsa-verifier == 'false' }}

    # tfcmt: Post the result of terraform plan and terraform apply to Pull Request comment
    # https://suzuki-shunsuke.github.io/tfcmt/install/
    - name: Install tfcmt
      working-directory: ${{ steps.work.outputs.tfcmt-dir }}
      env:
        VERSION: ${{ steps.tfcmt.outputs.version }}
        BIN_DIR: ${{ steps.work.outputs.bin-dir }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Install tfcmt"
        set -x
        repo="suzuki-shunsuke/tfcmt"
        version_tag="v${VERSION}"

        archive_file="tfcmt_linux_amd64.tar.gz"
        checksum_file="tfcmt_${VERSION}_checksums.txt"
        signature_file="${checksum_file}.sig"
        certificate_file="${checksum_file}.pem"
        provenance_file="multiple.intoto.jsonl"

        # Download asset files
        base_url="https://github.com/${repo}/releases/download/${version_tag}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${archive_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${checksum_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${signature_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${certificate_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${provenance_file}"

        # Verify checksum file by cosign
        cosign verify-blob \
          --signature "${signature_file}" \
          --certificate "${certificate_file}" \
          --certificate-identity-regexp 'https://github\.com/suzuki-shunsuke/go-release-workflow/\.github/workflows/release\.yaml@.*' \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          "${checksum_file}"
        grep "${archive_file}" "${checksum_file}" | sha256sum --check

        # Verify SLSA provenance by slsa-verifier
        slsa-verifier verify-artifact "${archive_file}" \
          --provenance-path "${provenance_file}" \
          --source-uri "github.com/${repo}" \
          --source-tag "${version_tag}"

        # Verify artifact attestations by GitHub CLI
        gh attestation verify "${archive_file}" \
          -R "${repo}" \
          --signer-workflow suzuki-shunsuke/go-release-workflow/.github/workflows/release.yaml

        # Install binary
        tar -zxvf "${archive_file}"
        mv tfcmt "${BIN_DIR}"
        echo "::endgroup::"
      shell: bash

    - name: Log details
      if: ${{ failure() || runner.debug }}
      working-directory: ${{ steps.work.outputs.base-dir }}
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: |
        echo "::group::Log details"
        echo "${INPUTS}"
        set -x
        tree -ah "${PWD}"
        gpg --with-fingerprint --show-keys "${GITHUB_ACTION_PATH}/pgp-key.txt"
        echo "::endgroup::"
      shell: bash

    - name: Remove unnecessary files
      if: ${{ success() || failure() }}
      env:
        TERRAFORM_DIR: ${{ steps.work.outputs.terraform-dir }}
        TFCMT_DIR: ${{ steps.work.outputs.tfcmt-dir }}
      run: |
        echo "::group::Remove unnecessary files"
        set -x
        rm -rf "${TERRAFORM_DIR}"
        rm -rf "${TFCMT_DIR}"
        echo "::endgroup::"
      shell: bash
